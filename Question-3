import java.util.*;

public class LongestHarmoniousSubsequence {

    public static int solve(int[] nums) {
        
        Map<Integer, Integer> frequency = new HashMap<>();
        for (int num : nums) {
            frequency.put(num, frequency.getOrDefault(num, 0) + 1);
        }
        
        int maxHarmoniousSubsequenceLength = 0;
        for (int num : frequency.keySet()) {
            if (frequency.get(num) > 0) {
                maxHarmoniousSubsequenceLength = Math.max(maxHarmoniousSubsequenceLength, frequency.get(num));
            }
        }

        int longestHarmoniousSubsequenceLength = 0;
        for (int num : frequency.keySet()) {
            if (frequency.get(num) > 0) {
                int currentHarmoniousSubsequenceLength = 1;
                while (frequency.containsKey(num + 1) && frequency.get(num + 1) > 0) {
                    frequency.put(num + 1, frequency.get(num + 1) - 1);
                    currentHarmoniousSubsequenceLength++;
                }
                longestHarmoniousSubsequenceLength = Math.max(longestHarmoniousSubsequenceLength, currentHarmoniousSubsequenceLength);
            }
        }

        return longestHarmoniousSubsequenceLength;
    }

    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 2, 5, 2, 3, 7};
        System.out.println(solve(nums));
    }
}

